# **🔍 Deep Dive into AES-CBC Encryption**
Let's break down every small detail about **AES in Cipher Block Chaining (CBC) mode**, including **IV (Initialization Vector)**, **Padding**, and **how encryption/decryption works step by step**.

---

## **📌 What is AES (Advanced Encryption Standard)?**
AES is a **block cipher**, which means it **encrypts data in fixed-size blocks** (16 bytes each).  
If the message is **not exactly** 16 bytes long, **we need to use padding** (explained later).  

AES supports different key sizes:
- **AES-128** → 128-bit key (16 bytes)
- **AES-192** → 192-bit key (24 bytes)
- **AES-256** → 256-bit key (32 bytes)

We are using **AES-256**, which is the most secure.

---

## **🧩 What is CBC (Cipher Block Chaining) Mode?**
CBC mode **improves AES security** by making each block dependent on the previous one.  
🔴 **Why?**  
- In **ECB (Electronic Codebook) mode**, every block of the same input **produces the same encrypted output**. This is insecure because patterns can be detected.  
- **CBC mode solves this by chaining blocks together** using an **Initialization Vector (IV)**.

### **🔗 How CBC Mode Works**
1. **First Block**
   - The plaintext is **XORed** with an **Initialization Vector (IV)** before encryption.
   - This ensures that even if the same message is encrypted multiple times, the ciphertext is different.

2. **Next Blocks**
   - Each plaintext block is **XORed with the previous ciphertext block** before encryption.
   - This creates a "chain" effect where each block depends on the one before it.

---

## **⚡ What is an IV (Initialization Vector)?**
An **IV (Initialization Vector)** is a **random 16-byte value** that is used to start the encryption process.  

🔹 **Purpose of IV:**  
- Ensures that the **same plaintext will produce different ciphertexts** every time it's encrypted.  
- **IV does NOT need to be secret**, but it **must be unique** for every encryption.  
- Without IV, CBC mode would be just like ECB mode, **which is insecure**.

---

## **📏 What is Padding and Why Do We Need It?**
AES works on **fixed block sizes** of **16 bytes**.  
🔹 **Problem:** If the message is **not exactly** 16, 32, 48 bytes, etc., **we need to fill the extra space**.  

🔹 **Solution:** **Padding**  
- If our text is **less than 16 bytes**, we **add extra bytes** to make it **a full 16-byte block**.  
- We use **PKCS7 padding**, which means we add `N` bytes where **N is the number of missing bytes**.  

### **📌 Example of PKCS7 Padding**
| Original Text  | Size (Bytes) | Padded Version |
|---------------|------------|------------------|
| `"Hello"`    | 5          | `Hello\x0B\x0B\x0B\x0B\x0B\x0B\x0B\x0B\x0B\x0B\x0B` |
| `"Hello, AES!"` | 12       | `Hello, AES!\x04\x04\x04\x04` |
| `"16BytesLongText"` | 16  | No padding needed |

🔹 The extra bytes are removed **after decryption**.

---

## **📜 Full Code Explanation (Line-by-Line)**
```python
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import os
```
- **`Crypto.Cipher.AES`** → Allows us to encrypt/decrypt using AES.  
- **`Crypto.Util.Padding`** → Handles adding/removing padding (since AES requires full blocks).  
- **`os`** → Generates random **keys and IVs** for security.  

---

### **🔹 Generating a Key and IV**
```python
key = os.urandom(32)  # AES-256 key (32 bytes)
iv = os.urandom(16)   # IV (16 bytes)
```
- **`os.urandom(32)`** → Generates a **random 32-byte (256-bit) encryption key**.
- **`os.urandom(16)`** → Generates a **random 16-byte IV** (necessary for CBC mode).
- These are **secure random values** to prevent attacks.

---

### **🔹 AES-CBC Encryption Function**
```python
def encrypt_AES_CBC(plaintext, key, iv):
    cipher = AES.new(key, AES.MODE_CBC, iv)  # Create AES cipher in CBC mode
    ciphertext = cipher.encrypt(pad(plaintext.encode(), AES.block_size))  # Encrypt with padding
    return ciphertext
```

#### **Step-by-Step Explanation**
1️⃣ **Create an AES Cipher**
```python
cipher = AES.new(key, AES.MODE_CBC, iv)
```
- Creates an **AES cipher object** in **CBC mode** using our key and IV.

2️⃣ **Apply Padding & Encrypt**
```python
ciphertext = cipher.encrypt(pad(plaintext.encode(), AES.block_size))
```
- **`.encode()`** → Converts plaintext into bytes (since AES works on bytes).
- **`pad(..., AES.block_size)`** → Adds padding to make the text **exactly 16 bytes**.
- **`.encrypt()`** → Encrypts the padded data.

3️⃣ **Return the Encrypted Text**
```python
return ciphertext
```
- The function returns the **encrypted data**.

---

### **🔹 AES-CBC Decryption Function**
```python
def decrypt_AES_CBC(ciphertext, key, iv):
    cipher = AES.new(key, AES.MODE_CBC, iv)  # Create AES cipher in CBC mode
    decrypted = unpad(cipher.decrypt(ciphertext), AES.block_size)  # Decrypt and remove padding
    return decrypted.decode()
```

#### **Step-by-Step Explanation**
1️⃣ **Create the Same AES Cipher**
```python
cipher = AES.new(key, AES.MODE_CBC, iv)
```
- Creates a **new AES cipher** in **CBC mode** with the same key and IV.

2️⃣ **Decrypt and Remove Padding**
```python
decrypted = unpad(cipher.decrypt(ciphertext), AES.block_size)
```
- **`.decrypt()`** → Decrypts the ciphertext.
- **`unpad(..., AES.block_size)`** → Removes the padding **added during encryption**.

3️⃣ **Return the Decrypted Text**
```python
return decrypted.decode()
```
- Converts the decrypted **bytes back into a readable string**.

---

### **🔹 Testing the Code**
```python
plaintext = "Hello, AES-CBC!"
ciphertext = encrypt_AES_CBC(plaintext, key, iv)
decrypted_text = decrypt_AES_CBC(ciphertext, key, iv)

print("Original:", plaintext)
print("Ciphertext (Hex):", ciphertext.hex())
print("Decrypted:", decrypted_text)
```
1. **Encrypts the message** `"Hello, AES-CBC!"`.
2. **Prints the ciphertext in hex format** (binary data converted for readability).
3. **Decrypts the ciphertext** and prints the original message.

---

## **🔑 Key Takeaways**
🔹 **AES is a block cipher** that works in **fixed 16-byte blocks**.  
🔹 **CBC mode improves security** by XORing each block with the previous one.  
🔹 **IV (Initialization Vector) makes encryption unpredictable** (must be unique).  
🔹 **Padding ensures messages fit into full blocks** (PKCS7 is commonly used).  
🔹 **CBC does NOT provide authentication** (consider AES-GCM for integrity checks).  

---

## **🚀 What’s Next?**
Want to encrypt **files, messages, or databases securely**? Let me know, and I can help with real-world applications! 🔐🚀